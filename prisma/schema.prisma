// This is your Prisma schema file,
// learn more more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Auth.js Models (as provided by you)
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]

  // --- Crucial field for one-time access ---
  // Becomes 'true' after the user successfully pays the $10.
  hasPaidForAccess Boolean @default(false)
  // Optional: To store the Lemon Squeezy Order ID for reference.
  // This helps if you need to look up the specific order in LS for support/refunds.
  // You might want to make this unique per user if they can only pay once.
  lemonSqueezyOrderId String? @unique @map("lemon_squeezy_order_id")
  // Optional: To store when the user paid, useful for tracking.
  accessGrantedAt     DateTime? @map("access_granted_at")


  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// --- Removed 'Product' and 'Purchase' models ---
// For a single, universal $10 payment unlocking all features,
// these dedicated models are often overkill and complicate initial setup.
// If your app grows to have different tiers/products later, you can add them back.